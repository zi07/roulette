/*

2020.02.21 금 : 버그 수정사항.

1. 초기설정 속도 및 가속도 설정 오버 가능성
2. 인터럽트의 폴링시 중복여부
3. 계산식 우선순위 + *
4. 0점 잡을때 마지막 사이클 영점을 잡는지 첫번째 사이클 영점을 잡는지
5. 마지막 바퀴에 영점을 잡은 후 지정된 위치에 멈추도록 코딩
6. 공식을 적용하지 않고 하드코딩으로 작성하는 것도 고려

*/

//1/8resolution. 1cycle=1600step
#include <Wire.h>
#include <AccelStepper.h>

const int step_pin = 5;//arduino D5
const int dir_pin= 4;//D4 not used
boolean bool_a = 0;
int step_value = 0;
//int jj_int_value = 0;
int moveValue = 0 ;
int moveValue_current = 0;
int feedBackValue = 0;
//long motorPosition = 0;
//long lastDebounceTime =0;
//String jj_value = "";
String num_string_value;
String r_ori_number_stringBefore;
String r_ori_number_string;

AccelStepper stepper(AccelStepper::DRIVER, step_pin, dir_pin); 

void setup() {
Wire.begin(1);// join i2c bus with address #1
Wire.onReceive(receiveEvent); // register event
Wire.onRequest(sendToMaster); // request event
Serial.begin(115200); // start serial for output
stepper_init(24000);
pinMode(2, 0);//HallSensorInput(InterruptPin)
digitalWrite(2,1);//PullUp
pinMode(13, 1);//init_LED
digitalWrite(13, 0);
pinMode(6, 1);//MotorDriver Enable
digitalWrite(6, 1);//MotorDriver Disable(High)
attachInterrupt(0, doZeroPoint, FALLING);//(pin D2)
}
/////////////////////////////////////////////////////////////////////////////////////
void loop() {
int n1=0, n2=0, n3=0, n4=0, n5=0, n6=0;
char r_ori_number[30];

num_string_value.toCharArray(r_ori_number, num_string_value.length());
sscanf(r_ori_number,"&%d$&%d$&%d$&%d$&%d$&%d$",&n1, &n2, &n3, &n4, &n5, &n6);
r_ori_number_string = r_ori_number;//중복출력방지 예전 코드와 같은지 체크위하여
if (r_ori_number_string == r_ori_number_stringBefore ){Serial.print(".");}
else {
Serial.println("");Serial.print(r_ori_number);Serial.print(" -> ");
Serial.print(n1);Serial.print(n2);Serial.print(n3);Serial.print(n4);
Serial.print(n5);Serial.println(n6);
}
r_ori_number_stringBefore = r_ori_number;//중복출력방지 예전 코드와 같은지 체크위하여

if ( (46>n1>0 && 46>n2>0 && 46>n3>0 && 46>n4>0 && 46>n5>0 && 46>n6>0)&& n1*n2*n3*n4*n5*n6!=0 ) {
Serial.println("r start!");
one_cycle (n1);Serial.println(n1);feedBackValue = 100 + n1;
led_on_off(1111);led_on_off(1111);
one_cycle (n2);Serial.println(n2);feedBackValue = 200 + n2;
led_on_off(1111);led_on_off(1111);
one_cycle (n3);Serial.println(n3);feedBackValue = 300 + n3;
led_on_off(1111);led_on_off(1111);
one_cycle (n4);Serial.println(n4);feedBackValue = 400 + n4;
led_on_off(1111);led_on_off(1111);
one_cycle (n5);Serial.println(n5);feedBackValue = 500 + n5;
led_on_off(1111);led_on_off(1111);
one_cycle (n6);Serial.println(n6);feedBackValue = 600 + n6;
Serial.print("why? require delay!!!???? n6 -> ");Serial.println(n6);
led_on_off(1111);led_on_off(1111);


num_string_value="";
num_string_value.toCharArray(r_ori_number, 30);

}
led_on_off(333);
led_on_off(333);
feedBackValue = 0;
}//loop close
////////////////////////////////////////////////////////////////
void doZeroPoint(){
  //lastDebounceTime = millis();
  delayMicroseconds(100);
  led_on_off(0);
  moveValue_current = stepper.currentPosition();
  if(digitalRead(2) == 0 && moveValue_current > 500 ) {step_value++;
  
  }
  }

void receiveEvent(int howMany) {
char num_char_value[howMany];//배열에서 문자끝을 알리는 \0(원래는W에-붙은 원표시)가
//포함되어야 하므로 배열을 크기를 정해서 정의할 때에는 하나더 큰 배열값을 넣어주어야 글자가 깨지지 않는다고 한다...
for (int i=0; i < howMany; i++) {
num_char_value[i] = Wire.read();
}
num_string_value = num_char_value;
//jj_value = num_string_value.substring(1, (num_string_value.indexOf("&",1)) );
//Serial.println(jj_value);
}

void sendToMaster(){
  String feedBackValueString = "&";
  feedBackValueString += feedBackValue;
  feedBackValueString += "$";
  Serial.println(feedBackValueString);
  char feedBackValueChar[6];
  feedBackValueString.toCharArray(feedBackValueChar, feedBackValueString.length()+1);
  Wire.write(feedBackValueChar);
}

void one_cycle (int one_cycle_num){
//stepper.runToNewPosition(0); // Cause an overshoot then back to 0
moveValue = 32000;//기본회전값 or 원점패치에 이상이 생겼을때 회전값
digitalWrite(6, 0);//using MotorControlEnable
stepper.moveTo(moveValue);
while(1){
Serial.print(step_value);Serial.print(" ");
//Serial.println(stepper.currentPosition());
if (step_value <= 1){stepper.run();}
if (step_value >= 2){stepper.run();
//moveValue_current = stepper.currentPosition();

moveValue = 4800 + moveValue_current + (one_cycle_num-1) * 35.5555 + 18;//45 * 35.55 = 1599.75
int basecycle = 4800; // 기본 3바퀴 회전값
int base_tol = 18;

if (one_cycle_num == 1)		{ moveValue = basecycle + moveValue_current + base_tol + 0 ; }
if (one_cycle_num == 2)		{ moveValue = basecycle + moveValue_current + base_tol + 35 ; }
if (one_cycle_num == 3)		{ moveValue = basecycle + moveValue_current + base_tol + 71 ; }
if (one_cycle_num == 4)		{ moveValue = basecycle + moveValue_current + base_tol + 106 ; }
if (one_cycle_num == 5)		{ moveValue = basecycle + moveValue_current + base_tol + 142; }
if (one_cycle_num == 6)		{ moveValue = basecycle + moveValue_current + base_tol + 177; }
if (one_cycle_num == 7)		{ moveValue = basecycle + moveValue_current + base_tol + 213; }
if (one_cycle_num == 8)		{ moveValue = basecycle + moveValue_current + base_tol + 248; }
if (one_cycle_num == 9)		{ moveValue = basecycle + moveValue_current + base_tol + 284; }
if (one_cycle_num == 10)	{ moveValue = basecycle + moveValue_current + base_tol + 319; }
if (one_cycle_num == 11)	{ moveValue = basecycle + moveValue_current + base_tol + 355; }
if (one_cycle_num == 12)	{ moveValue = basecycle + moveValue_current + base_tol + 391; }
if (one_cycle_num == 13)	{ moveValue = basecycle + moveValue_current + base_tol + 426; }
if (one_cycle_num == 14)	{ moveValue = basecycle + moveValue_current + base_tol + 462; }
if (one_cycle_num == 15)	{ moveValue = basecycle + moveValue_current + base_tol + 497; }
if (one_cycle_num == 16)	{ moveValue = basecycle + moveValue_current + base_tol + 533; }
if (one_cycle_num == 17)	{ moveValue = basecycle + moveValue_current + base_tol + 568; }
if (one_cycle_num == 18)	{ moveValue = basecycle + moveValue_current + base_tol + 604; }
if (one_cycle_num == 19)	{ moveValue = basecycle + moveValue_current + base_tol + 639; }
if (one_cycle_num == 20)	{ moveValue = basecycle + moveValue_current + base_tol + 675; }
if (one_cycle_num == 21)	{ moveValue = basecycle + moveValue_current + base_tol + 711; }
if (one_cycle_num == 22)	{ moveValue = basecycle + moveValue_current + base_tol + 746; }
if (one_cycle_num == 23)	{ moveValue = basecycle + moveValue_current + base_tol + 782; }
if (one_cycle_num == 24)	{ moveValue = basecycle + moveValue_current + base_tol + 817; }
if (one_cycle_num == 25)	{ moveValue = basecycle + moveValue_current + base_tol + 853; }
if (one_cycle_num == 26)	{ moveValue = basecycle + moveValue_current + base_tol + 888; }
if (one_cycle_num == 27)	{ moveValue = basecycle + moveValue_current + base_tol + 924; }
if (one_cycle_num == 28)	{ moveValue = basecycle + moveValue_current + base_tol + 959; }
if (one_cycle_num == 29)	{ moveValue = basecycle + moveValue_current + base_tol + 995; }
if (one_cycle_num == 30)	{ moveValue = basecycle + moveValue_current + base_tol + 1031; }
if (one_cycle_num == 31)	{ moveValue = basecycle + moveValue_current + base_tol + 1066; }
if (one_cycle_num == 32)	{ moveValue = basecycle + moveValue_current + base_tol + 1102; }
if (one_cycle_num == 33)	{ moveValue = basecycle + moveValue_current + base_tol + 1137; }
if (one_cycle_num == 34)	{ moveValue = basecycle + moveValue_current + base_tol + 1173; }
if (one_cycle_num == 35)	{ moveValue = basecycle + moveValue_current + base_tol + 1208; }
if (one_cycle_num == 36)	{ moveValue = basecycle + moveValue_current + base_tol + 1244; }
if (one_cycle_num == 37)	{ moveValue = basecycle + moveValue_current + base_tol + 1279; }
if (one_cycle_num == 38)	{ moveValue = basecycle + moveValue_current + base_tol + 1315; }
if (one_cycle_num == 39)	{ moveValue = basecycle + moveValue_current + base_tol + 1351; }
if (one_cycle_num == 40)	{ moveValue = basecycle + moveValue_current + base_tol + 1386; }
if (one_cycle_num == 41)	{ moveValue = basecycle + moveValue_current + base_tol + 1422; }
if (one_cycle_num == 42)	{ moveValue = basecycle + moveValue_current + base_tol + 1457; }
if (one_cycle_num == 43)	{ moveValue = basecycle + moveValue_current + base_tol + 1493; }
if (one_cycle_num == 44)	{ moveValue = basecycle + moveValue_current + base_tol + 1528; }
if (one_cycle_num == 45)	{ moveValue = basecycle + moveValue_current + base_tol + 1564; }


stepper.runToNewPosition(moveValue);
stepper.run();
}
stepper.run();
if (stepper.isRunning()==0) {digitalWrite(6, 1);break;}
//stepper.runToNewPosition(0); // Cause an overshoot then back to 0
}//while close
step_value=0;
stepper.setCurrentPosition(0);
led_on_off(100);
} //one_cycle_close
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////


void stepper_init(int MaxSpeedValue){ 
stepper.setMaxSpeed(MaxSpeedValue); 
stepper.setAcceleration(MaxSpeedValue/4); 
}

void led_on_off (int de_time){
digitalWrite(13,bool_a);
delay(de_time);
bool_a = !bool_a;
}



